models:
  - model_spec:
      edge_sources: [inputs/salesforceTasks, inputs/salesforceContact, inputs/websitePageVisits,
                     inputs/webhookSource, inputs/websiteSource, inputs/blacklistDomains, inputs/domainSummary,
                     inputs/webappIdentifies, inputs/salesForceLeadsTable, inputs/autotrackIdentifies]
      entity_key: user
      main_id_type: main_id
      validity_time: 24h
    model_type: id_stitcher
    name: domain_profile_id_stitcher
  - model_spec:
      features:
        - tablefeature: {description: Whether a domain is mql or not, name: is_mql, ref: inputs/salesForceLeadsTable,
                         value: max(case when salesForceLeadsTable.mql__c == 'True' then 1 else 0 end)}
        - tablevar: {filter: (context_sources_job_run_id = (select top 1 context_sources_job_run_id
                       from blacklistDomains order by timestamp desc)), name: blacklistFlag, ref: inputs/blacklistDomains,
          value: max(case when exclude_reason is not null then 1 else 0 end)}
        - tablevar: {name: domainSummary_account_type, ref: inputs/domainSummary, value: domainSummary.account_type}
        - feature: {description: Whether a domain should be ignored for the analysis,
                    name: ignore_domain, value: max(case when blacklistFlag = 1 or domainSummary_account_type
                      like '%free%' then 1 else 0 end)}
        - tablevar: {filter: '{{ call_conversion() }}', name: salesCallEventTime, ref: inputs/salesforceTasks,
                     value: min(activitydate)}
        - feature: {name: sales_conversion_timestamp, value: salesCallEventTime}
        - tablevar: {description: 'Salesforce touches are converted to one of following
          events - sf_inbound_email, sf_outbound_email, sf_call, null', name: salesEvents,
                     ref: inputs/salesforceTasks, value: "json_agg(activitydate, case when (type='Email'\
          \ or tasksubtype = 'Email') then case when lower(subject) like '%[in]%'\
          \ then 'sf_inbound_email' \\ else 'sf_outbound_email' end when {{ call_conversion()\
          \ }} then 'sf_call' else null end as event)"}
        - tablevar: {filter: timestamp < sales_conversion_timestamp and timestamp > var('start_date'),
                     name: page_events_var, ref: inputs/websitePageVisits, value: "json_agg(timestamp,\
          \ case when split_part(trim(context_page_path, '/'), '/', 1) in var('valid_page_paths')\
          \ then split_part(trim(context_page_path, '/'), '/', 1) \\ else var('default_page_path')\
          \ end as event)"}
        - feature: {name: page_events, value: page_events_var}
        - tablevar: {filter: variable_1 is null and timestamp < sales_conversion_timestamp
                       and timestamp > var('start_date'), name: webhookFormSubmit, ref: inputs/webhookSource,
          value: min(timestamp)}
        - feature: {name: formSubmit, value: 'min(webhookFormSubmit, websiteFormSubmit)'}
      id_stitching: models/domain_profile_id_stitcher
      macros:
        - {name: call_conversion, value: "type = 'Call' or tasksubtype='Call' or type\
        \ like '%demo%') and \\ (rlike(lower(subject), '.*\\\\bcall\\\\b.*') or rlike(lower(subject),\
        \ '.*\\\\bdemo\\\\b.*'"}
      validity_time: 24h
    model_type: feature_table_model
    name: domain_profile
